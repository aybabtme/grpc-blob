// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	PutReq
	PutRes
	GetReq
	GetRes
	WriteReq
	WriteRes
	ReadReq
	ReadRes
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PutReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Blob []byte `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *PutReq) Reset()                    { *m = PutReq{} }
func (m *PutReq) String() string            { return proto.CompactTextString(m) }
func (*PutReq) ProtoMessage()               {}
func (*PutReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PutReq) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type PutRes struct {
}

func (m *PutRes) Reset()                    { *m = PutRes{} }
func (m *PutRes) String() string            { return proto.CompactTextString(m) }
func (*PutRes) ProtoMessage()               {}
func (*PutRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetRes struct {
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *GetRes) Reset()                    { *m = GetRes{} }
func (m *GetRes) String() string            { return proto.CompactTextString(m) }
func (*GetRes) ProtoMessage()               {}
func (*GetRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRes) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type WriteReq struct {
	// Types that are valid to be assigned to Phase:
	//	*WriteReq_Name
	//	*WriteReq_Blob
	Phase isWriteReq_Phase `protobuf_oneof:"phase"`
}

func (m *WriteReq) Reset()                    { *m = WriteReq{} }
func (m *WriteReq) String() string            { return proto.CompactTextString(m) }
func (*WriteReq) ProtoMessage()               {}
func (*WriteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isWriteReq_Phase interface {
	isWriteReq_Phase()
}

type WriteReq_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,oneof"`
}
type WriteReq_Blob struct {
	Blob []byte `protobuf:"bytes,2,opt,name=blob,proto3,oneof"`
}

func (*WriteReq_Name) isWriteReq_Phase() {}
func (*WriteReq_Blob) isWriteReq_Phase() {}

func (m *WriteReq) GetPhase() isWriteReq_Phase {
	if m != nil {
		return m.Phase
	}
	return nil
}

func (m *WriteReq) GetName() string {
	if x, ok := m.GetPhase().(*WriteReq_Name); ok {
		return x.Name
	}
	return ""
}

func (m *WriteReq) GetBlob() []byte {
	if x, ok := m.GetPhase().(*WriteReq_Blob); ok {
		return x.Blob
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WriteReq) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WriteReq_OneofMarshaler, _WriteReq_OneofUnmarshaler, _WriteReq_OneofSizer, []interface{}{
		(*WriteReq_Name)(nil),
		(*WriteReq_Blob)(nil),
	}
}

func _WriteReq_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WriteReq)
	// phase
	switch x := m.Phase.(type) {
	case *WriteReq_Name:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *WriteReq_Blob:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Blob)
	case nil:
	default:
		return fmt.Errorf("WriteReq.Phase has unexpected type %T", x)
	}
	return nil
}

func _WriteReq_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WriteReq)
	switch tag {
	case 1: // phase.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Phase = &WriteReq_Name{x}
		return true, err
	case 2: // phase.blob
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Phase = &WriteReq_Blob{x}
		return true, err
	default:
		return false, nil
	}
}

func _WriteReq_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WriteReq)
	// phase
	switch x := m.Phase.(type) {
	case *WriteReq_Name:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *WriteReq_Blob:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Blob)))
		n += len(x.Blob)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type WriteRes struct {
}

func (m *WriteRes) Reset()                    { *m = WriteRes{} }
func (m *WriteRes) String() string            { return proto.CompactTextString(m) }
func (*WriteRes) ProtoMessage()               {}
func (*WriteRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ReadReq struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	BufSize uint32 `protobuf:"varint,2,opt,name=buf_size,json=bufSize" json:"buf_size,omitempty"`
}

func (m *ReadReq) Reset()                    { *m = ReadReq{} }
func (m *ReadReq) String() string            { return proto.CompactTextString(m) }
func (*ReadReq) ProtoMessage()               {}
func (*ReadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadReq) GetBufSize() uint32 {
	if m != nil {
		return m.BufSize
	}
	return 0
}

type ReadRes struct {
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *ReadRes) Reset()                    { *m = ReadRes{} }
func (m *ReadRes) String() string            { return proto.CompactTextString(m) }
func (*ReadRes) ProtoMessage()               {}
func (*ReadRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadRes) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func init() {
	proto.RegisterType((*PutReq)(nil), "service.PutReq")
	proto.RegisterType((*PutRes)(nil), "service.PutRes")
	proto.RegisterType((*GetReq)(nil), "service.GetReq")
	proto.RegisterType((*GetRes)(nil), "service.GetRes")
	proto.RegisterType((*WriteReq)(nil), "service.WriteReq")
	proto.RegisterType((*WriteRes)(nil), "service.WriteRes")
	proto.RegisterType((*ReadReq)(nil), "service.ReadReq")
	proto.RegisterType((*ReadRes)(nil), "service.ReadRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Blober service

type BloberClient interface {
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRes, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Blober_WriteClient, error)
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (Blober_ReadClient, error)
}

type bloberClient struct {
	cc *grpc.ClientConn
}

func NewBloberClient(cc *grpc.ClientConn) BloberClient {
	return &bloberClient{cc}
}

func (c *bloberClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRes, error) {
	out := new(PutRes)
	err := grpc.Invoke(ctx, "/service.Blober/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloberClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := grpc.Invoke(ctx, "/service.Blober/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloberClient) Write(ctx context.Context, opts ...grpc.CallOption) (Blober_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Blober_serviceDesc.Streams[0], c.cc, "/service.Blober/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &bloberWriteClient{stream}
	return x, nil
}

type Blober_WriteClient interface {
	Send(*WriteReq) error
	CloseAndRecv() (*WriteRes, error)
	grpc.ClientStream
}

type bloberWriteClient struct {
	grpc.ClientStream
}

func (x *bloberWriteClient) Send(m *WriteReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bloberWriteClient) CloseAndRecv() (*WriteRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bloberClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (Blober_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Blober_serviceDesc.Streams[1], c.cc, "/service.Blober/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &bloberReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blober_ReadClient interface {
	Recv() (*ReadRes, error)
	grpc.ClientStream
}

type bloberReadClient struct {
	grpc.ClientStream
}

func (x *bloberReadClient) Recv() (*ReadRes, error) {
	m := new(ReadRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Blober service

type BloberServer interface {
	Put(context.Context, *PutReq) (*PutRes, error)
	Get(context.Context, *GetReq) (*GetRes, error)
	Write(Blober_WriteServer) error
	Read(*ReadReq, Blober_ReadServer) error
}

func RegisterBloberServer(s *grpc.Server, srv BloberServer) {
	s.RegisterService(&_Blober_serviceDesc, srv)
}

func _Blober_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloberServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Blober/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloberServer).Put(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blober_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloberServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Blober/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloberServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blober_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BloberServer).Write(&bloberWriteServer{stream})
}

type Blober_WriteServer interface {
	SendAndClose(*WriteRes) error
	Recv() (*WriteReq, error)
	grpc.ServerStream
}

type bloberWriteServer struct {
	grpc.ServerStream
}

func (x *bloberWriteServer) SendAndClose(m *WriteRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bloberWriteServer) Recv() (*WriteReq, error) {
	m := new(WriteReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blober_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BloberServer).Read(m, &bloberReadServer{stream})
}

type Blober_ReadServer interface {
	Send(*ReadRes) error
	grpc.ServerStream
}

type bloberReadServer struct {
	grpc.ServerStream
}

func (x *bloberReadServer) Send(m *ReadRes) error {
	return x.ServerStream.SendMsg(m)
}

var _Blober_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Blober",
	HandlerType: (*BloberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Blober_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Blober_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _Blober_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Blober_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0xc5, 0xd0, 0x26, 0xe1, 0x44, 0x05, 0x9c, 0x3a, 0x94, 0x08, 0xa4, 0xca, 0x0b, 0x19, 0x50,
	0xa9, 0x60, 0x61, 0x43, 0xea, 0x52, 0xc6, 0xca, 0x0c, 0x8c, 0x28, 0x86, 0xab, 0x88, 0x54, 0x48,
	0xc9, 0x25, 0x0c, 0xfd, 0x33, 0xfe, 0x0e, 0xd9, 0x75, 0x2c, 0x2b, 0xb4, 0x9b, 0xef, 0xdd, 0xbd,
	0x77, 0xf7, 0x9e, 0x61, 0xc0, 0x54, 0xfd, 0x14, 0x6f, 0x34, 0x59, 0x57, 0x65, 0x5d, 0x62, 0xec,
	0x4a, 0x39, 0x85, 0x68, 0xd1, 0xd4, 0x8a, 0xbe, 0x11, 0xa1, 0xf7, 0x95, 0x7f, 0xd2, 0x48, 0x8c,
	0x45, 0x76, 0xac, 0xec, 0xdb, 0x60, 0x7a, 0x55, 0xea, 0xd1, 0xe1, 0x58, 0x64, 0x27, 0xca, 0xbe,
	0x65, 0xe2, 0x18, 0x2c, 0x2f, 0x21, 0x9a, 0xd3, 0x3e, 0xae, 0xef, 0xb2, 0x57, 0x11, 0x81, 0xca,
	0x23, 0x24, 0x2f, 0x55, 0x51, 0x93, 0x61, 0x0f, 0x43, 0xf6, 0xd3, 0x81, 0xdb, 0x3d, 0x0c, 0x77,
	0x1b, 0xd4, 0x54, 0xb3, 0x18, 0xfa, 0xeb, 0x8f, 0x9c, 0x49, 0x82, 0x17, 0x60, 0xf9, 0x00, 0xb1,
	0xa2, 0xfc, 0x7d, 0x9f, 0x8b, 0x0b, 0x48, 0x74, 0xb3, 0x7c, 0xe5, 0x62, 0x43, 0x56, 0x6d, 0xa0,
	0x62, 0xdd, 0x2c, 0x9f, 0x8b, 0x0d, 0xc9, 0xab, 0x96, 0xb9, 0xf3, 0xca, 0xbb, 0x5f, 0x01, 0xd1,
	0x6c, 0x55, 0x6a, 0xaa, 0xf0, 0x1a, 0x8e, 0x16, 0x4d, 0x8d, 0xa7, 0x93, 0x36, 0xc8, 0x6d, 0x6c,
	0x69, 0x07, 0x60, 0x33, 0x38, 0xa7, 0x70, 0x70, 0x9b, 0x51, 0xda, 0x01, 0x18, 0x6f, 0xa1, 0x6f,
	0x1d, 0xe0, 0xb9, 0xef, 0xb4, 0x91, 0xa4, 0xff, 0x20, 0xce, 0x04, 0xde, 0x40, 0xcf, 0x1c, 0x8b,
	0x67, 0xbe, 0xe9, 0x5c, 0xa7, 0x5d, 0x84, 0xa7, 0x42, 0x47, 0xf6, 0xa7, 0xef, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xee, 0x49, 0x0b, 0x3f, 0xfa, 0x01, 0x00, 0x00,
}
