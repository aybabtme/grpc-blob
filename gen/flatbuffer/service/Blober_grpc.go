//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: service

package service

import "github.com/google/flatbuffers/go"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Client API for Blober service
type BloberClient interface{
  Put(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* PutRes, error)  
  Stream(ctx context.Context, 
  	opts... grpc.CallOption) (Blober_StreamClient, error)  
}

type bloberClient struct {
  cc *grpc.ClientConn
}

func NewBloberClient(cc *grpc.ClientConn) BloberClient {
  return &bloberClient{cc}
}

func (c *bloberClient) Put(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* PutRes, error) {
  out := new(PutRes)
  err := grpc.Invoke(ctx, "/service.Blober/Put", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *bloberClient) Stream(ctx context.Context, 
	opts... grpc.CallOption) (Blober_StreamClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_Blober_serviceDesc.Streams[0], c.cc, "/service.Blober/Stream", opts...)
  if err != nil { return nil, err }
  x := &bloberStreamClient{stream}
  return x,nil
}

type Blober_StreamClient interface {
  Send(*flatbuffers.Builder) error
  CloseAndRecv() (*StreamRes, error)
  grpc.ClientStream
}

type bloberStreamClient struct{
  grpc.ClientStream
}

func (x *bloberStreamClient) Send(m *flatbuffers.Builder) error {
  return x.ClientStream.SendMsg(m)
}

func (x *bloberStreamClient) CloseAndRecv() (*StreamRes, error) {
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  m := new (StreamRes)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

// Server API for Blober service
type BloberServer interface {
  Put(context.Context, *PutReq) (*flatbuffers.Builder, error)  
  Stream(Blober_StreamServer) error  
}

func RegisterBloberServer(s *grpc.Server, srv BloberServer) {
  s.RegisterService(&_Blober_serviceDesc, srv)
}

func _Blober_Put_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(PutReq)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(BloberServer).Put(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/service.Blober/Put",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(BloberServer).Put(ctx, req.(* PutReq))
  }
  return interceptor(ctx, in, info, handler)
}


func _Blober_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(BloberServer).Stream(&bloberStreamServer{stream})
}

type Blober_StreamServer interface { 
  Recv() (* StreamReq, error)
  SendAndClose(* flatbuffers.Builder) error
  grpc.ServerStream
}

type bloberStreamServer struct {
  grpc.ServerStream
}

func (x *bloberStreamServer) Recv() (*StreamReq, error) {
  m := new(StreamReq)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (x *bloberStreamServer) SendAndClose(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}


var _Blober_serviceDesc = grpc.ServiceDesc{
  ServiceName: "service.Blober",
  HandlerType: (*BloberServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Put",
      Handler: _Blober_Put_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "Stream",
      Handler: _Blober_Stream_Handler, 
      ClientStreams: true,
    },
  },
}

